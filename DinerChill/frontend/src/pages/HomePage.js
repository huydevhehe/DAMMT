import { Link } from "react-router-dom";
import { useState, useEffect } from "react";
import FilterBox from "../components/FilterBox";
import RestaurantCard from "../components/RestaurantCard";
import SearchBar from "../components/SearchBar";
import { useApp } from "../context/AppContext";
import { restaurantsAPI } from "../services/api";
import "../styles/HomePage.css";

function HomePage() {
  const [showPasswordBanner, setShowPasswordBanner] = useState(true);
  // Filters state - may be used in future implementation
  // const [filters, setFilters] = useState({
  //   area: '',
  //   priceRange: '',
  //   mainDish: '',
  //   occasion: '',
  //   promotion: '',
  //   privateRoom: '',
  //   dailyMeal: '',
  //   companyEvent: '',
  //   privateArea: '',
  //   familyEvent: '',
  //   serviceStyle: '',
  //   cuisineStyle: '',
  // });

  const { recentlyViewed, clearRecentlyViewed } = useApp();

  const [allRestaurants, setAllRestaurants] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [hotDeals, setHotDeals] = useState([]);
  const [seafoodRestaurants, setSeafoodRestaurants] = useState([]);
  const [partyRestaurants, setPartyRestaurants] = useState([]);

  const [displayCounts, setDisplayCounts] = useState({
    hotDeals: 4,
    seafoodRestaurants: 4,
    chineseRestaurants: 4,
    popularCuisines: 4,
    partyRestaurants: 4,
    famousLocations: 4,
    touristRestaurants: 4,
    lunchSuggestions: 4,
    luxuryRestaurants: 4,
    trustedRestaurants: 4,
    monthlyFavorites: 4,
    amenitiesRestaurants: 4,
    newOnDinerChill: 4,
    newsAndBlog: 4,
  });

  useEffect(() => {
    const isBannerDismissed = localStorage.getItem("passwordBannerDismissed");
    if (isBannerDismissed === "true") {
      setShowPasswordBanner(false);
    }

    const fetchRestaurants = async () => {
      try {
        setLoading(true);
        const data = await restaurantsAPI.getAll();
        if (!data || data.length === 0) {
          throw new Error("Kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ API.");
        }
        console.log("Fetched restaurants from API:", data);

        setAllRestaurants(data);

        // Ph√¢n lo·∫°i nh√† h√†ng
        const dealsData = data.filter((item) => item.promotions?.length > 0);
        setHotDeals(dealsData);

        const seafoodData = data.filter(
          (r) =>
            r.cuisineType?.toLowerCase().includes("h·∫£i s·∫£n") ||
            r.description?.toLowerCase().includes("h·∫£i s·∫£n")
        );
        setSeafoodRestaurants(seafoodData);

        const partyData = data.filter(
          (r) =>
            r.description?.toLowerCase().includes("ti·ªác") ||
            r.name?.toLowerCase().includes("ti·ªác")
        );
        setPartyRestaurants(partyData);

        setLoading(false);
      } catch (err) {
        console.error("L·ªói khi t·∫£i danh s√°ch nh√† h√†ng:", err);
        setError(err.message || "L·ªói khi t·∫£i d·ªØ li·ªáu");
        setAllRestaurants([]);
        setLoading(false);
      }
    };

    fetchRestaurants();
  }, []);

  const handleDismissBanner = () => {
    setShowPasswordBanner(false);
    localStorage.setItem("passwordBannerDismissed", "true");
  };

  const handleLoadMore = (category, dataList) => {
    setDisplayCounts((prev) => ({
      ...prev,
      [category]: prev[category] + 4,
    }));
  };

  const renderSection = (
    title,
    subtitle,
    link,
    queryParams,
    dataList,
    className,
    category
  ) => {
    // Fallback to allRestaurants if the specific category list is empty
    const finalDataList =
      dataList && dataList.length > 0 ? dataList : allRestaurants;
    const displayedData = finalDataList.slice(0, displayCounts[category]);
    const hasMoreData = finalDataList.length > displayedData.length;

    return (
      <div className={`section-wrapper ${className}`}>
        <div className="section-header">
          <div className="section-title">
            <h2>{title}</h2>
            <p>{subtitle}</p>
          </div>
          <Link
            to={`${link}${queryParams ? `?${queryParams}` : ""}`}
            className="view-all"
          >
            Xem t·∫•t c·∫£
          </Link>
        </div>
        <div className="restaurant-grid">
          {displayedData.length > 0 ? (
            displayedData.map((item) => (
              <RestaurantCard key={item.id} restaurant={item} />
            ))
          ) : (
            <p>Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã.</p>
          )}
        </div>
        {hasMoreData && (
          <button
            onClick={() => handleLoadMore(category, finalDataList)}
            className="load-more-btn"
            disabled={loading}
          >
            {loading ? "ƒêang t·∫£i..." : "T·∫£i th√™m"}
          </button>
        )}
      </div>
    );
  };

  const renderRecentlyViewed = () => {
    const allRecentlyViewed = Object.values(recentlyViewed).flat();
    if (allRecentlyViewed.length === 0) return null;

    return (
      <div className="section-wrapper recently-viewed-section">
        <div className="section-header">
          <div className="section-title">
            <h2>ƒê√£ xem g·∫ßn ƒë√¢y</h2>
            <p>Xem l·∫°i nh·ªØng nh√† h√†ng b·∫°n ƒë√£ quan t√¢m</p>
          </div>
          <button onClick={clearRecentlyViewed} className="clear-all-btn">
            X√≥a t·∫•t c·∫£
          </button>
        </div>
        <div className="restaurant-grid">
          {allRecentlyViewed.slice(0, 4).map((item) => (
            <RestaurantCard key={item.id} restaurant={item} />
          ))}
        </div>
      </div>
    );
  };

  if (loading)
    return (
      <div className="loading-container">
        <div className="loading-spinner"></div>
        <p>ƒêang t·∫£i d·ªØ li·ªáu nh√† h√†ng...</p>
      </div>
    );

  if (error)
    return (
      <div className="error-container">
        <p>L·ªói: {error}</p>
        <button className="btn" onClick={() => window.location.reload()}>
          Th·ª≠ l·∫°i
        </button>
      </div>
    );

  return (
    <div className="home-page">
      <SearchBar />
      {showPasswordBanner && (
        <div className="password-notification-banner">
          <div className="password-notification-content">
            <span className="password-notification-icon">üîí</span>
            <div className="password-notification-text">
              <p>
                ƒê·ªÉ b·∫£o m·∫≠t t√†i kho·∫£n, h√£y c·∫≠p nh·∫≠t m·∫≠t kh·∫©u c·ªßa b·∫°n th∆∞·ªùng
                xuy√™n. <Link to="/change-password">C·∫≠p nh·∫≠t ngay</Link>
              </p>
            </div>
            <button
              className="password-notification-dismiss"
              onClick={handleDismissBanner}
            >
              ‚úï
            </button>
          </div>
        </div>
      )}

      <div className="container">
        <FilterBox />
      </div>

      {renderSection(
        "Nh√† h√†ng",
        "Kh√°m ph√° t·∫•t c·∫£ c√°c nh√† h√†ng tr√™n DinerChill",
        "/restaurants",
        "",
        allRestaurants,
        "all-restaurants-section",
        "hotDeals"
      )}

      {allRestaurants.length > 0 && (
        <>
          {hotDeals.length > 0 &&
            renderSection(
              "∆Øu ƒë√£i Hot",
              "Kh√°m ph√° c√°c nh√† h√†ng v√† s·∫£n ph·∫©m ƒëang c√≥ ∆∞u ƒë√£i h·∫•p d·∫´n ngay",
              "/deals",
              "promotion=∆Øu ƒë√£i",
              hotDeals,
              "hot-deals-section",
              "hotDeals"
            )}

          {seafoodRestaurants.length > 0 &&
            renderSection(
              "Nh√† h√†ng h·∫£i s·∫£n ngon nh·∫•t",
              "Tham kh·∫£o ngay c√°c nh√† h√†ng h·∫£i s·∫£n ƒë∆∞·ª£c y√™u th√≠ch!",
              "/restaurants",
              "cuisine=H·∫£i s·∫£n&minRating=4",
              seafoodRestaurants,
              "seafood-restaurants-section",
              "seafoodRestaurants"
            )}

          {partyRestaurants.length > 0 &&
            renderSection(
              "Nh√† h√†ng ph√π h·ª£p ƒë·∫∑t ti·ªác",
              "∆Øu ƒë√£i ƒëa d·∫°ng gi√∫p b·∫°n d·ªÖ d√†ng l·ª±a ch·ªçn ƒë·ªãa ƒëi·ªÉm ti·ªác",
              "/restaurants",
              "suitableFor=ti·ªác&minCapacity=50",
              partyRestaurants,
              "party-restaurants-section",
              "partyRestaurants"
            )}
        </>
      )}

      {renderRecentlyViewed()}
    </div>
  );
}

export default HomePage;
