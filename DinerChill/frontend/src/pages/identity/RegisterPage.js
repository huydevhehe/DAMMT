import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useApp } from '../../context/AppContext';
import '../../styles/identity/AuthPages.css';

function RegisterPage() {
  const { register, verifyEmail, resendVerification } = useApp();
  const navigate = useNavigate();
  
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    password: '',
    confirmPassword: ''
  });
  
  // Add state for password visibility
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);
  const [loading, setLoading] = useState(false);
  const [phoneError, setPhoneError] = useState('');

  
  // State for verification section
  const [showVerification, setShowVerification] = useState(false);
  const [verificationCode, setVerificationCode] = useState(['', '', '', '', '', '']);
  const [verificationLoading, setVerificationLoading] = useState(false);
  const [resendLoading, setResendLoading] = useState(false);
  const [countdown, setCountdown] = useState(0);
  const [showSuccessModal, setShowSuccessModal] = useState(false);
  
  // References for the 6 verification inputs
  const verificationRefs = [
    React.useRef(null),
    React.useRef(null),
    React.useRef(null),
    React.useRef(null),
    React.useRef(null),
    React.useRef(null)
  ];
  
  // Handle countdown for resend button
  React.useEffect(() => {
    if (countdown > 0) {
      const timer = setTimeout(() => {
        setCountdown(countdown - 1);
      }, 1000);
      return () => clearTimeout(timer);
    }
  }, [countdown]);

  
  const handleChange = (e) => {
    const { name, value } = e.target;
    
    // N·∫øu l√† tr∆∞·ªùng ƒëi·ªán tho·∫°i, ki·ªÉm tra ƒë·ªãnh d·∫°ng
    if (name === 'phone' && value.trim() !== '') {
      const phoneRegex = /^0\d{9,10}$/;
      
      if (!phoneRegex.test(value)) {
        setPhoneError('S·ªë ƒëi·ªán tho·∫°i ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng s·ªë 0 v√† c√≥ 10-11 ch·ªØ s·ªë');
      } else {
        setPhoneError('');
      }
    } else if (name === 'phone') {
      setPhoneError('');
    }
    
    setFormData(prevState => ({
      ...prevState,
      [name]: value
    }));
  };
  
  // Add toggle functions for password visibility
  const togglePasswordVisibility = () => {
    setShowPassword(prev => !prev);
  };
  
  const toggleConfirmPasswordVisibility = () => {
    setShowConfirmPassword(prev => !prev);
  };
  
  const handleVerificationCodeChange = (e, index) => {
    // Only allow digits
    const value = e.target.value.replace(/\D/g, '');
    
    // Update the verification code array at the specified index
    const newVerificationCode = [...verificationCode];
    newVerificationCode[index] = value.substring(0, 1); // Only take the first digit
    setVerificationCode(newVerificationCode);
    
    // Auto focus on next input if a digit was entered
    if (value !== '' && index < 5) {
      verificationRefs[index + 1].current.focus();
    }
  }
  
  // Handle backspace keys to move to previous input
  const handleKeyDown = (e, index) => {
    if (e.key === 'Backspace' && verificationCode[index] === '' && index > 0) {
      // If current input is empty and backspace is pressed, focus on previous input
      verificationRefs[index - 1].current.focus();
    } else if (e.key === 'ArrowLeft' && index > 0) {
      // Move focus to previous input on left arrow
      verificationRefs[index - 1].current.focus();
    } else if (e.key === 'ArrowRight' && index < 5) {
      // Move focus to next input on right arrow
      verificationRefs[index + 1].current.focus();
    }
  }
  
  // Handle pasting verification code
  const handleVerificationPaste = (e) => {
    e.preventDefault();
    const pastedData = e.clipboardData.getData('text').replace(/\D/g, '').substring(0, 6);
    
    if (pastedData.length > 0) {
      const newVerificationCode = [...verificationCode];
      
      // Fill in the available digits from the pasted data
      for (let i = 0; i < pastedData.length && i < 6; i++) {
        newVerificationCode[i] = pastedData[i];
      }
      
      setVerificationCode(newVerificationCode);
      
      // Focus on the input after the last filled position or the last input
      const focusIndex = Math.min(pastedData.length, 5);
      verificationRefs[focusIndex].current.focus();
    }
  };
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Ki·ªÉm tra m·∫≠t kh·∫©u tr√πng kh·ªõp
    if (formData.password !== formData.confirmPassword) {
      setError('M·∫≠t kh·∫©u nh·∫≠p l·∫°i kh√¥ng kh·ªõp.');

      return;
    }
    
    // Ki·ªÉm tra m·∫≠t kh·∫©u c√≥ ƒë·ªß y√™u c·∫ßu (√≠t nh·∫•t 6 k√Ω t·ª±, c√≥ c·∫£ ch·ªØ v√† s·ªë)
    const passwordRegex = /^(?=.*[A-Za-z])(?=.*\d).{6,}$/;
    if (!passwordRegex.test(formData.password)) {
      setError('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª± v√† bao g·ªìm c·∫£ ch·ªØ v√† s·ªë.');
      return;
    }
    
    // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i (lu√¥n b·∫Øt bu·ªôc)
    const phoneRegex = /^0\d{9,10}$/;
    if (!phoneRegex.test(formData.phone)) {
      setPhoneError('S·ªë ƒëi·ªán tho·∫°i ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng s·ªë 0 v√† c√≥ 10-11 ch·ªØ s·ªë');
      return;
    }
    

    setLoading(true);
    setError(null);
    
    try {

      const response = await register({

        name: formData.name,
        email: formData.email,
        phone: formData.phone,
        password: formData.password
      });
      

      if (response.requiresVerification) {
        // Show verification form instead of redirecting
        setShowVerification(true);
        setSuccess(response.message || 'ƒêƒÉng k√Ω th√†nh c√¥ng. Vui l√≤ng x√°c th·ª±c email c·ªßa b·∫°n.');
        
        // Clear success message after 5 seconds
        setTimeout(() => {
          setSuccess(null);
        }, 5000);
      } else {
        // Direct login successful, navigate to home
        navigate('/');
      }

    } catch (err) {
      setError(err.message || 'ƒêƒÉng k√Ω kh√¥ng th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setLoading(false);
    }
  };
  
  const handleVerificationSubmit = async (e) => {
    e.preventDefault();
    setVerificationLoading(true);
    setError(null);
    
    try {
      // Remove all spaces when submitting the code
      const cleanCode = verificationCode.join('');
      await verifyEmail(formData.email, cleanCode);
      
      // Keep loading state for 5 seconds before showing success modal
      setTimeout(() => {
        setVerificationLoading(false);
        // Show success modal after loading completes
        setShowSuccessModal(true);
      }, 5000);
    } catch (err) {
      setError(err.message || 'Kh√¥ng th·ªÉ x√°c th·ª±c email. Vui l√≤ng ki·ªÉm tra l·∫°i m√£ x√°c th·ª±c.');
      setVerificationLoading(false);
    }
  };
  
  const handleSuccessModalClose = () => {
    setShowSuccessModal(false);
    navigate('/');
  };
  
  const handleResendCode = async () => {
    if (countdown > 0) return;
    
    setResendLoading(true);
    setError(null);
    
    try {
      const response = await resendVerification(formData.email);
      setSuccess(response.message || 'M√£ x√°c th·ª±c m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n');
      setCountdown(60); // ƒê·∫øm ng∆∞·ª£c 60 gi√¢y
      
      // Clear success message after 5 seconds
      setTimeout(() => {
        setSuccess(null);
      }, 5000);
    } catch (err) {
      setError(err.message || 'Kh√¥ng th·ªÉ g·ª≠i l·∫°i m√£ x√°c th·ª±c. Vui l√≤ng th·ª≠ l·∫°i sau.');
      
      // Clear error message after 5 seconds
      setTimeout(() => {
        setError(null);
      }, 5000);
    } finally {
      setResendLoading(false);
    }
  };
  
  // Ki·ªÉm tra xem email c√≥ ph·∫£i l√† Gmail kh√¥ng
  const isGmail = formData.email && formData.email.toLowerCase().endsWith('@gmail.com');
  
  return (
    <div className="auth-page">
      <div className="auth-container">
        <div className="auth-card">

          {showSuccessModal && (
            <div className="success-modal-overlay">
              <div className="success-modal">
                <div className="success-modal-icon">
                  <span>‚úÖ</span>
                </div>
                <h3>X√°c th·ª±c email th√†nh c√¥ng!</h3>
                <button 
                  onClick={handleSuccessModalClose}
                  className="success-modal-button"
                >
                  Ok
                </button>
              </div>
            </div>
          )}
          
          {!showVerification ? (
            <>
              <div className="auth-header">
                <h1>ƒêƒÉng k√Ω</h1>
                <p>T·∫°o t√†i kho·∫£n ƒë·ªÉ tr·∫£i nghi·ªám d·ªãch v·ª• ƒë·∫∑t b√†n t·ªët nh·∫•t</p>
              </div>
              
              {error && (
                <div className="auth-error">
                  <i className="error-icon">‚ö†Ô∏è</i>
                  <span>{error}</span>
                </div>
              )}
              
              <form onSubmit={handleSubmit} className="auth-form">
                <div className="form-group">
                  <label htmlFor="name">H·ªç t√™n<span className="required">*</span></label>
                  <div className="input-with-icon">
                    <span className="input-icon">üë§</span>
                    <input
                      type="text"
                      id="name"
                      name="name"
                      value={formData.name}
                      onChange={handleChange}
                      placeholder="Nh·∫≠p h·ªç t√™n c·ªßa b·∫°n"
                      required
                    />
                  </div>
                </div>
                
                <div className="form-group">
                  <label htmlFor="email">Email<span className="required">*</span></label>
                  <div className="input-with-icon">
                    <span className="input-icon">‚úâÔ∏è</span>
                    <input
                      type="email"
                      id="email"
                      name="email"
                      value={formData.email}
                      onChange={handleChange}
                      placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ email"
                      required
                    />
                  </div>
                </div>
                
                <div className="form-group">
                  <label htmlFor="phone">S·ªë ƒëi·ªán tho·∫°i<span className="required">*</span></label>
                  <div className="input-with-icon">
                    <span className="input-icon">üì±</span>
                    <input
                      type="tel"
                      id="phone"
                      name="phone"
                      value={formData.phone}
                      onChange={handleChange}
                      placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i (b·∫Øt ƒë·∫ßu b·∫±ng s·ªë 0)"
                      required
                    />
                  </div>
                  {phoneError && (
                    <div className="field-error">
                      <i className="error-icon">‚ö†Ô∏è</i>
                      <span>{phoneError}</span>
                    </div>
                  )}
                </div>
                
                <div className="form-group">
                  <label htmlFor="password">M·∫≠t kh·∫©u<span className="required">*</span></label>
                  <div className="input-with-icon">
                    <span className="input-icon">üîí</span>
                    <input
                      type={showPassword ? "text" : "password"}
                      id="password"
                      name="password"
                      value={formData.password}
                      onChange={handleChange}
                      placeholder="M·∫≠t kh·∫©u √≠t nh·∫•t 6 k√Ω t·ª± (g·ªìm ch·ªØ v√† s·ªë)"
                      required
                      minLength="6"
                      autoComplete="new-password"
                    />
                    <button 
                      type="button"
                      className="password-toggle-btn"
                      onClick={togglePasswordVisibility}
                      tabIndex="-1"
                    >
                      {showPassword ? "üëÅÔ∏è" : "üëÅÔ∏è‚Äçüó®Ô∏è"}
                    </button>
                  </div>
                </div>
                
                <div className="form-group">
                  <label htmlFor="confirmPassword">X√°c nh·∫≠n m·∫≠t kh·∫©u<span className="required">*</span></label>
                  <div className="input-with-icon">
                    <span className="input-icon">üîí</span>
                    <input
                      type={showConfirmPassword ? "text" : "password"}
                      id="confirmPassword"
                      name="confirmPassword"
                      value={formData.confirmPassword}
                      onChange={handleChange}
                      placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
                      required
                      minLength="6"
                      autoComplete="new-password"
                    />
                    <button 
                      type="button"
                      className="password-toggle-btn"
                      onClick={toggleConfirmPasswordVisibility}
                      tabIndex="-1"
                    >
                      {showConfirmPassword ? "üëÅÔ∏è" : "üëÅÔ∏è‚Äçüó®Ô∏è"}
                    </button>
                  </div>
                </div>
                
                <button 
                  type="submit" 
                  className="auth-button"
                  disabled={loading || phoneError}
                >
                  {loading ? 
                    <><i className="loading-icon">‚è≥</i> ƒêang x·ª≠ l√Ω...</> : 
                    <><i className="button-icon">üìù</i> ƒêƒÉng k√Ω</>
                  }
                </button>
              </form>
              
              <div className="auth-footer">
                <p>
                  ƒê√£ c√≥ t√†i kho·∫£n? <Link to="/login" className="login-link">ƒêƒÉng nh·∫≠p ngay</Link>
                </p>
              </div>
            </>
          ) : (
            <>
              <div className="auth-header verification-header">
                <h1>X√°c nh·∫≠n email c·ªßa b·∫°n</h1>
                <p className="email-confirm-text">
                  H√£y x√°c nh·∫≠n r·∫±ng <strong>{formData.email}</strong> l√† email c·ªßa b·∫°n
                </p>
              </div>
              
              {error && (
                <div className="auth-error">
                  <i className="error-icon">‚ö†Ô∏è</i>
                  <span>{error}</span>
                </div>
              )}
              
              {success && (
                <div className="auth-success">
                  <i className="success-icon">‚úÖ</i>
                  <span>{success}</span>
                </div>
              )}
              
              <form onSubmit={handleVerificationSubmit} className="auth-form verification-form">
                <div className="email-icon-container">
                  <div className="email-icon">
                    <span>‚úâÔ∏è</span>
                  </div>
                </div>
                
                <div className="verification-message">
                  <p>Ch√∫ng t√¥i ƒë√£ g·ª≠i m√£ x√°c th·ª±c ƒë·∫øn email c·ªßa b·∫°n</p>
                  {isGmail && (
                    <a 
                      href="https://mail.google.com" 
                      target="_blank" 
                      rel="noopener noreferrer"
                      className="open-gmail-link"
                    >
                      M·ªü Gmail
                    </a>
                  )}
                </div>
                
                <div className="verification-code-section">
                  <div className="verification-code-label">
                    <span>Nh·∫≠p m√£ x√°c th·ª±c</span>
                  </div>
                  
                  <div className="verification-inputs-container">
                    <input
                      type="text" 
                      ref={verificationRefs[0]}
                      maxLength="1"
                      value={verificationCode[0]}
                      onChange={(e) => handleVerificationCodeChange(e, 0)}
                      onKeyDown={(e) => handleKeyDown(e, 0)}
                      onPaste={handleVerificationPaste}
                      className="verification-code-input"
                      autoComplete="off"
                      inputMode="numeric"
                      required
                    />
                    <input
                      type="text" 
                      ref={verificationRefs[1]}
                      maxLength="1"
                      value={verificationCode[1]}
                      onChange={(e) => handleVerificationCodeChange(e, 1)}
                      onKeyDown={(e) => handleKeyDown(e, 1)}
                      className="verification-code-input"
                      autoComplete="off"
                      inputMode="numeric"
                      required
                    />
                    <input
                      type="text" 
                      ref={verificationRefs[2]}
                      maxLength="1"
                      value={verificationCode[2]}
                      onChange={(e) => handleVerificationCodeChange(e, 2)}
                      onKeyDown={(e) => handleKeyDown(e, 2)}
                      className="verification-code-input"
                      autoComplete="off"
                      inputMode="numeric"
                      required
                    />
                    <input
                      type="text" 
                      ref={verificationRefs[3]}
                      maxLength="1"
                      value={verificationCode[3]}
                      onChange={(e) => handleVerificationCodeChange(e, 3)}
                      onKeyDown={(e) => handleKeyDown(e, 3)}
                      className="verification-code-input"
                      autoComplete="off"
                      inputMode="numeric"
                      required
                    />
                    <input
                      type="text" 
                      ref={verificationRefs[4]}
                      maxLength="1"
                      value={verificationCode[4]}
                      onChange={(e) => handleVerificationCodeChange(e, 4)}
                      onKeyDown={(e) => handleKeyDown(e, 4)}
                      className="verification-code-input"
                      autoComplete="off"
                      inputMode="numeric"
                      required
                    />
                    <input
                      type="text" 
                      ref={verificationRefs[5]}
                      maxLength="1"
                      value={verificationCode[5]}
                      onChange={(e) => handleVerificationCodeChange(e, 5)}
                      onKeyDown={(e) => handleKeyDown(e, 5)}
                      className="verification-code-input"
                      autoComplete="off"
                      inputMode="numeric"
                      required
                    />
                  </div>
                  
                  <div className="verification-help">
                    <p>Vui l√≤ng ki·ªÉm tra c·∫£ th∆∞ m·ª•c spam/junk n·∫øu b·∫°n kh√¥ng th·∫•y email</p>
                  </div>
                </div>
                
                <button 
                  type="submit" 
                  className="auth-button verification-button"
                  disabled={verificationLoading || verificationCode.some(code => code === '')}
                >
                  {verificationLoading ? 
                    <><i className="loading-icon">‚è≥</i> ƒêang x·ª≠ l√Ω...</> : 
                    <><i className="button-icon">‚úÖ</i> X√°c nh·∫≠n</>
                  }
                </button>
                
                <div className="resend-link-container">
                  <button 
                    type="button" 
                    onClick={handleResendCode} 
                    disabled={resendLoading || countdown > 0}
                    className="resend-code-link"
                  >
                    {resendLoading ? 'ƒêang g·ª≠i...' : 
                     countdown > 0 ? `G·ª≠i l·∫°i m√£ sau ${countdown}s` : 'G·ª≠i l·∫°i m√£ x√°c th·ª±c'}
                  </button>
                </div>
              </form>
            </>
          )}

        </div>
      </div>
    </div>
  );
}

export default RegisterPage; 